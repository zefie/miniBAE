BAE_BUILT_IN_PATCHES	:= 1
BAE_API			:= Ansi
DEBUG			:= 0

TARGET_LIB	:= libminiBAE.js
TARGET_BIN	:= playbae.js
PACK_FILENAME	:= playbae_wasm32.tar.gz

include inc/Makefile.common

EXTRA_FILES		:= \
			src/playbae/minibae-audio.htm \
			src/playbae/minibae-audio.js

ARCH		:= -m32 -static
CC		:= emcc
CXX		:= emcc
LD		:= $(CC)
AR      	:= emar
STRIP		:= strip


OPTI		:= -O2 -fPIC
CFLAGS  	:= $(ARCH) $(OPTI) $(INC_PATH) -DWASM -D_THREAD_SAFE -Wno-pragma-pack -Wno-unused-value

ifneq ($(BAE_FLAGS),)
	CFLAGS	+= $(BAE_FLAGS)
endif

include inc/Makefile.versioning
CFLAGS		+= -D_VERSION=\""$(VERSION)"\"

CXXFLAGS 	:= $(CFLAGS)
LDFLAGS		:= $(ARCH) $(OPTI) -s 'ASYNCIFY=1' -s 'DEFAULT_LIBRARY_FUNCS_TO_INCLUDE=[$$Browser]' -s EXPORT_ES6=1 -s EXPORTED_RUNTIME_METHODS=[FS] -s SINGLE_FILE=1 \
 --embed-file src/banks/patches111/patches111.hsb\@/home/web_user/patches.hsb -Wno-unused-command-line-argument



LIBS	= 	-lpthread

all: ${TARGET_LIB} $(TARGET_BIN)

$(TARGET_LIB): ${OBJ}
	@mkdir -p $(TARGET_OUT)
	${LD} -o $(TARGET_OUT)${TARGET_LIB} ${LDFLAGS} ${OBJ} $(LIBS)

$(TARGET_BIN): ${OBJ_BIN}
	@mkdir -p $(TARGET_OUT)
	@cp $(EXTRA_FILES) $(TARGET_OUT)
	${LD} -o $(TARGET_OUT)${TARGET_BIN} ${LDFLAGS} ${OBJ_BIN} ${LIBS}

pack: ${TARGET_BIN}
	@rm -f $(TARGET_OUT)$(PACK_FILENAME)
	@tar -zcf $(PACK_FILENAME) -C $(TARGET_OUT) --exclude "./$(PACK_FILENAME)" .
	@mv $(PACK_FILENAME) $(TARGET_OUT)$(PACK_FILENAME)

$(DST_FILES): ${TARGET_OUT}/% : %
	@echo "$< ==> $@"
	@[ -e $< ] || (echo "unspecified error copying $<" && false)
	@mkdir -p $(dir $@)
	@cp  $< $@

# Rules for compiling source files to object files
$(OBJ_DIR)%.o : %.cpp
	@echo @compile $<
	@mkdir -p $(OBJ_DIR)
	@${CXX} -c ${CXXFLAGS} $< -o $@

$(OBJ_DIR)%.o : %.c
	@echo @compile $<
	@mkdir -p $(OBJ_DIR)
	@${CC} -c ${CFLAGS} $< -o $@

clean:
	@rm -rdf $(TARGET_OUT)
	@rm -rdf $(OBJ_DIR)
	@rm -rdf $(BUILD_DIR)
	@rm -rdf $(TEST_OUT_DIR)
	@echo Cleaned!

